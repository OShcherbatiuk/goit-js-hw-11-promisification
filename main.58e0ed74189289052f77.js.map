{"version":3,"sources":["webpack:///./js/task-1.js","webpack:///./js/task-2.js","webpack:///./js/task-3.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","table","makeTransaction","transaction","onSuccess","onError","min","max","Math","floor","random","reject","id","logSuccess","logError","warn","amount","catch"],"mappings":"2JAAMA,EAAQ,SAACC,GACX,OAAO,IAAIC,SAAQ,SAACC,GACpBC,YAAW,WACTD,EAAQF,KACPA,OAIDI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,G,kCCbXK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAWnBC,EAAkB,SAACC,EAAUC,GACjC,IAAMC,EAAeF,EAASG,KAAI,SAAAC,GAAI,OACpCA,EAAKP,OAASI,EAAd,iBAA8BG,EAA9B,CAAoCN,QAASM,EAAKN,SAAWM,KAG7D,OAAO,IAAIhB,SAAQ,SAAAC,GACjBA,EAAQa,OAKRX,EAAS,SAAAW,GAAY,OAAIT,QAAQY,MAAMH,IAK7CH,EAAgBH,EAAO,SACvBG,EAAgBH,EAAO,OAKvBG,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GCtCnC,IAIMe,EAAkB,SAACC,EAAaC,EAAWC,GAC7C,IAL+BC,EAAKC,EAK9BzB,GALyBwB,EAKS,IALJC,EAKS,IAJxCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAMlD,OAAO,IAAItB,SAAQ,SAACC,EAAS0B,GACzBzB,YAAW,WACYsB,KAAKE,SAAW,GACvBzB,EAAQ,CAAE2B,GAAIT,EAAYS,GAAIxB,KAAMN,IAAW6B,EAAOR,EAAYS,MAC/E9B,OAIL+B,EAAa,SAAC,GAAiB,IAAfD,EAAe,EAAfA,GAAIxB,EAAW,EAAXA,KACxBC,QAAQC,IAAR,eAA2BsB,EAA3B,iBAA8CxB,EAA9C,OAGI0B,EAAW,SAAAF,GACfvB,QAAQ0B,KAAR,gCAA6CH,EAA7C,8BAMFV,EAAgB,CAAEU,GAAI,GAAII,OAAQ,MAClCd,EAAgB,CAAEU,GAAI,GAAII,OAAQ,MAClCd,EAAgB,CAAEU,GAAI,GAAII,OAAQ,KAClCd,EAAgB,CAAEU,GAAI,GAAII,OAAQ,MAIlCd,EAAgB,CAAEU,GAAI,GAAII,OAAQ,MAC/BzB,KAAKsB,GACLI,MAAMH,GAETZ,EAAgB,CAAEU,GAAI,GAAII,OAAQ,MAC/BzB,KAAKsB,GACLI,MAAMH,GAETZ,EAAgB,CAAEU,GAAI,GAAII,OAAQ,KAC/BzB,KAAKsB,GACLI,MAAMH,GAETZ,EAAgB,CAAEU,GAAI,GAAII,OAAQ,MAC/BzB,KAAKsB,GACLI,MAAMH,K","file":"main.58e0ed74189289052f77.js","sourcesContent":["const delay = (ms) => {\r\n    return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      resolve(ms)\r\n    }, ms)\r\n  })\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms","const users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\n// const toggleUserState = (allUsers, userName, callback) => {\r\n//   const updatedUsers = allUsers.map(user =>\r\n//     user.name === userName ? { ...user, active: !user.active } : user,\r\n//   );\r\n\r\n//   callback(updatedUsers);\r\n// };\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n  const updatedUsers = allUsers.map(user =>\r\n    user.name === userName ? { ...user, active: !user.active } : user,\r\n  );\r\n\r\n    return new Promise(resolve => {\r\n      resolve(updatedUsers)\r\n  })\r\n};\r\n\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\n/*\r\n * Сейчас работает так\r\n */\r\ntoggleUserState(users, 'Mango', logger);\r\ntoggleUserState(users, 'Lux', logger);\r\n\r\n/*\r\n * Должно работать так\r\n */\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);","const randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = (transaction, onSuccess, onError) => {\r\n    const delay = randomIntegerFromInterval(200, 500);\r\n    \r\n    return new Promise((resolve, reject) => {\r\n        setTimeout(() => {\r\n            const canProcess = Math.random() > 0.3;\r\n           canProcess ? resolve({ id: transaction.id, time: delay }) : reject(transaction.id)\r\n        }, delay)\r\n    })\r\n};\r\n\r\nconst logSuccess = ({ id, time }) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n/*\r\n * Работает так\r\n */\r\nmakeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\nmakeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\nmakeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\nmakeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\r\n/*\r\n * Должно работать так\r\n */\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n  .catch(logError);"],"sourceRoot":""}